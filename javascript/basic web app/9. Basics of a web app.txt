1. Understanding JSON (JavaScript Object Notation)

    What is JSON?
        A lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.
        JSON is a string representation of data structures (objects and arrays).
        Commonly used in web applications to transmit data between a client (browser) and a server.

    JSON Syntax:
        Consists of key-value pairs.
        Keys must be strings (in double quotes).
        Values can be strings, numbers, arrays, objects, or null.
        Example:

    {
      "name": "John",
      "age": 30,
      "isStudent": false,
      "subjects": ["Math", "Science"],
      "address": {
        "city": "New York",
        "zip": "10001"
      }
    }

Methods to Work with JSON in JavaScript:

    JSON.stringify(object): Converts a JavaScript object to a JSON string.

const obj = { name: "Alice", age: 25 };
const jsonString = JSON.stringify(obj);
console.log(jsonString); // Output: '{"name":"Alice","age":25}'

JSON.parse(jsonString): Converts a JSON string to a JavaScript object.

        const jsonString = '{"name":"Alice","age":25}';
        const obj = JSON.parse(jsonString);
        console.log(obj.name); // Output: Alice

2. Client-Server Communication Over HTTP

    Client-Server Architecture:
        The client (browser) sends a request to the server.
        The server processes the request and responds with data, often in JSON format.

    HTTP Protocol:
        Hypertext Transfer Protocol (HTTP) is the foundation of data communication on the web.
        Works as a request-response protocol:
            Request: Sent by the client.
            Response: Sent back by the server.

3. Basic HTTP Methods

    GET:
        Fetches data from the server.
        Does not modify data on the server.
        Example: Fetching a user profile.
    POST:
        Sends data to the server to create a new resource.
        Example: Submitting a registration form.
    PUT:
        Updates an existing resource on the server.
        Example: Updating a user profile.
    DELETE:
        Deletes a resource on the server.
        Example: Removing a user account.

4. Understanding APIs (Application Programming Interfaces)

    What is an API?
        A set of rules that allows two applications to communicate with each other.
        Provides a way to request data or services from a server.

    Advantages of APIs:
        Enables seamless integration between different applications.
        Reduces complexity by abstracting the underlying functionality.
        Allows developers to use pre-built functionalities.

5. REST APIs

    What is a REST API?
        REST (Representational State Transfer) is a design principle for APIs.
        Utilizes HTTP methods (GET, POST, PUT, DELETE) for communication.
        Data is typically exchanged in JSON format.

    Key Features of REST APIs:
        Stateless: Each request is independent; no client information is stored on the server between requests.
        Resource-Oriented: Operates on "resources" (e.g., users, products).
        URL Structure:
            Example: /api/users (to fetch all users), /api/users/1 (to fetch user with ID 1).

6. AJAX (Asynchronous JavaScript and XML)

    What is AJAX?
        A technique for making asynchronous HTTP requests to the server without reloading the web page.
        Data is often exchanged in JSON format (though XML was used historically).

    Advantages of AJAX:
        Improves user experience by avoiding full page reloads.
        Enables dynamic updates to a web page.

    Example Using Fetch API:

fetch('https://api.example.com/data')
  .then(response => response.json()) // Parse JSON response
  .then(data => {
    console.log(data); // Work with data
  })
  .catch(error => console.error('Error:', error));