1. find()

    Purpose: Returns the first element in the array that satisfies the provided testing function. If no elements satisfy the condition, it returns undefined.
    Syntax:

arr.find(callback(element[, index[, array]])[, thisArg])

Example:

    const numbers = [5, 12, 8, 130, 44];
    const found = numbers.find(num => num > 10);
    console.log(found); // Output: 12

2. findIndex()

    Purpose: Returns the index of the first element in the array that satisfies the provided testing function. If no elements match, it returns -1.
    Syntax:

arr.findIndex(callback(element[, index[, array]])[, thisArg])

Example:

    const numbers = [5, 12, 8, 130, 44];
    const index = numbers.findIndex(num => num > 10);
    console.log(index); // Output: 1

3. map()

    Purpose: Creates a new array populated with the results of calling a provided function on every element in the original array.
    Syntax:

arr.map(callback(currentValue[, index[, array]])[, thisArg])

Example:

    const numbers = [1, 2, 3, 4];
    const doubled = numbers.map(num => num * 2);
    console.log(doubled); // Output: [2, 4, 6, 8]

4. reduce()

    Purpose: Executes a reducer function (that you provide) on each element of the array, resulting in a single output value (e.g., sum, product).
    Syntax:

arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])

Example:

    const numbers = [1, 2, 3, 4];
    const sum = numbers.reduce((acc, curr) => acc + curr, 0);
    console.log(sum); // Output: 10

    Note: The initialValue is optional but often used to set a starting value for the accumulation.

5. filter()

    Purpose: Creates a new array with all elements that pass the test implemented by the provided function.
    Syntax:

arr.filter(callback(element[, index[, array]])[, thisArg])

Example:

const numbers = [1, 2, 3, 4, 5];
const evens = numbers.filter(num => num % 2 === 0);
console.log(evens); // Output: [2, 4]