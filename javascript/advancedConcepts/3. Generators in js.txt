Generators are a special kind of function introduced in ES6 (ECMAScript 2015). Unlike normal functions, generators can pause their execution and later resume it, which allows for more powerful control over function execution and iteration.
1. Defining a Generator Function

A generator function is declared using the function* syntax. When called, it does not execute immediately but returns a generator object that conforms to both the iterator and iterable protocols.

Syntax:

function* generatorFunction() {
  // Generator logic
}

Example:

function* simpleGenerator() {
  console.log('Generator started');
  yield 1; // Pauses here
  console.log('Resumed');
  yield 2; // Pauses here
  console.log('Resumed again');
  return 3; // Completes
}

const generator = simpleGenerator();

console.log(generator.next()); // Output: "Generator started", { value: 1, done: false }
console.log(generator.next()); // Output: "Resumed", { value: 2, done: false }
console.log(generator.next()); // Output: "Resumed again", { value: 3, done: true }
console.log(generator.next()); // Output: { value: undefined, done: true }


Use Cases for Generators

    Asynchronous Programming:
        Generators can simplify asynchronous code, especially when combined with yield for suspending asynchronous operations.

    Lazy Evaluation:
        Generators produce values on demand, making them ideal for scenarios where you donâ€™t need all results at once (e.g., large datasets, infinite sequences).

    State Machines:
        Generators can represent state machines due to their ability to pause and resume at different states.

    Custom Iterables:
        Generators make it easy to create custom iterable objects.